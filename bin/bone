#!/usr/bin/ruby

# Put our local lib in first place
BASE_PATH = File.expand_path File.join(File.dirname(__FILE__), '..')
lib_dir = File.join(BASE_PATH, 'lib')
$:.unshift lib_dir

require 'bone'

Bone.require_vendor 'drydock', '0.6.8'

require 'bone/cli'

# Command-line interface for bin/stella
class Bone::CLI::Definition
  extend Drydock
  
  default :keys
  trawler :get
  
  global :t, :token, String, "Specify a bone token (override BONE_TOKEN environment variable)"
  global :q, :quiet, "Less output"
  
  global :V, :version, "Display version" do
    puts "Bone: #{Bone::VERSION} (api: #{Bone::APIVERSION})"
    exit
  end
  
  global :D, :debug, "Enable debug mode" do
    Drydock.debug true
    Bone.debug = true
  end
  
  about "Get a value for the given key"
  usage "bone get keyname"
  usage "bone keyname"
  command :get => Bone::CLI
  
  about "Set a new key/value pair"
  usage "bone set keyname keyvalue"
  usage "bone set keyname=keyvalue"
  usage "bone set keyname path/2/file"
  command :set => Bone::CLI
  
  #about "Delete a key/value pair"
  #usage "bone del keyname"
  #command :del => Bone::CLI
  #command_alias :del, :rem
  #command_alias :del, :delete
  
  about "Display all available keys"
  usage "bone keys"
  usage "bone keys keyname"
  command :keys => Bone::CLI
  
  about "Display the current token"
  usage "bone token"
  command :token => Bone::CLI

  about "Display the current secret"
  usage "bone token"
  command :secret => Bone::CLI

  about "Generate a new token"
  usage "bone generate"
  command :generate => Bone::CLI
  
end

begin
  Drydock.run!(ARGV, STDIN) if Drydock.run? && !Drydock.has_run?
rescue Bone::NoToken => ex
  puts "Invalid token: #{ex.message}"
  puts "Create a token with one of the following commands:", 
       "bone generate", 
       "bone register TOKEN SECRET"
  STDERR.puts ex.backtrace if Bone.debug
  exit 1
rescue Bone::Problem => ex
  puts ex.message
  STDERR.puts ex.backtrace if Bone.debug
  exit 1
rescue Drydock::ArgError, Drydock::OptError => ex
  STDERR.puts ex.message
  STDERR.puts ex.usage
rescue Drydock::InvalidArgument => ex
  STDERR.puts ex.message
rescue Drydock::UnknownCommand => ex
  STDERR.puts "Unknown command: %s" % ex.name
rescue Interrupt
  puts $/, "Exiting... "
  exit 1
rescue => ex
  STDERR.puts "ERROR (#{ex.class.to_s}): #{ex.message}"
  STDERR.puts ex.backtrace if Drydock.debug
end

